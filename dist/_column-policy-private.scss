//
// These are private helper functions and mixins used by column-policy.
// These functions and mixins are not intended to be used outside of
// column-policy.scss.
//

$column-policy-default-flag-nth-of-type-support: true;
$column-policy-default-flag-data-attribute-support: false;
$column-policy-default-flag-nth-child-hack-support: false;
$column-policy-default-flag-nth-child-hack-depth: 20;
$column-policy-default-flag-nth-child-offset: 0;
$column-policy-default-flag-nth-of-type-set: 0;
$column-policy-default-flag-use-once: false;
$column-policy-default-flag-column-padding: 0;
$column-policy-default-flag-calc-support: true;

$column-policy-flag-nth-of-type-support: null;
$column-policy-flag-data-attribute-support: null;
$column-policy-flag-nth-child-hack-support: null;
$column-policy-flag-nth-child-hack-depth: null;
$column-policy-flag-nth-child-offset: null;
$column-policy-flag-nth-of-type-set: null;
$column-policy-flag-use-once: null;
$column-policy-flag-column-padding: null;
$column-policy-flag-calc-support: null;

$column-policy-internal-first-use: true !default;
$column-policy-internal-class-name: "column" !default;
$column-policy-internal-attribute-name: "column" !default;

@mixin _column-policy-set-factory-settings(
    $use-nth-of-type:          $column-policy-default-flag-nth-of-type-support,
    $use-data-attribute:       $column-policy-default-flag-data-attribute-support,
    $use-nth-child-hack:       $column-policy-default-flag-nth-child-hack-support,
    $set-nth-child-hack-depth: $column-policy-default-flag-nth-child-hack-depth,
    $set-nth-child-offset:     $column-policy-default-flag-nth-child-offset,
    $set-nth-of-type-set:        $column-policy-default-flag-nth-of-type-set,
    $column-padding:           $column-policy-default-flag-column-padding,
    $use-calc:                 $column-policy-default-flag-calc-support,
    $use-once:                 $column-policy-default-flag-use-once
) {
    $column-policy-default-flag-nth-of-type-support:    $use-nth-of-type !global;
    $column-policy-default-flag-data-attribute-support: $use-data-attribute !global;
    $column-policy-default-flag-nth-child-hack-support: $use-nth-child-hack !global;
    $column-policy-default-flag-nth-child-hack-depth:   $set-nth-child-hack-depth !global;
    $column-policy-default-flag-nth-child-offset:       $set-nth-child-offset !global;
    $column-policy-default-flag-nth-of-type-set:        $set-nth-of-type-set !global;
    $column-policy-default-flag-use-once:               $use-once !global;
    $column-policy-default-flag-column-padding:         $column-padding !global;
    $column-policy-default-flag-calc-support:           $use-calc !global;
}

//
// Defines styles common for all columns. This should only be generated
// the first time column-policy is used.
//
// @access private
//
@mixin _column-policy-common-styles {
    $classname: $column-policy-internal-class-name !global;
    $data-attribute: $column-policy-internal-attribute-name !global;

    @if ($column-policy-internal-first-use) {
        .#{$classname},
        [data-#{$data-attribute}] {
            float: left;
            position: relative;
            box-sizing: border-box;
        }
    }

    $column-policy-internal-first-use: false !global;
}

//
// Writes out the styles needed for a specific column given the approach
// to use from the global flags.
//
// @access private
// @param number $total: (required) The total number of columns.
// @param number $current: (requried) The current column that the styles
// are to be applied.
//
@mixin _column-policy-column($total, $current) {
    $column-selectors: _column-policy-column-selectors($total, $current);

    #{$column-selectors} {
        @content;
    }
}

//
// Generates the padding left and right for each column.
// The padding generated is intended to be evenly distributed between
// all the columns. The padding is calcuated in terms of the interval
// and gutter values. @see _column-policy-padding-interval for more
// information on the column interval. The gutter is the same as the
// global $column-policy-flag-column-padding value. It is the visual
// spacing that is observed by the user when looking at the spacing
// between each column.
// The left padding is the absolute difference of all intervals and
// gutters before the current column. 
// The right padding is the difference between intervals before and
// including the current column and all gutters before the current
// column.
//
// For example if we have an interval of 16.6666667px and gutter of
// 20px then the 3rd column could be calculated as:
// intervalForCol1 = intervalForCol2 = intervalForCol3 = 16.6666667px
// gutterForCol1 = gutterForCol2 = 20px
// padding-left: abs(((intervalForCol1 - gutterForCol1) + intervalForCol2) - intervalForCol2)
// padding-right: ((((intervalForCol1 - gutterForCol1) + intervalForCol2) - gutterForCol2) + intervalForCol3);
//
// @param number $column: (required) The current index of the column
// being inspected.
// @param number $columns: (required) The total number of columns.
//
@mixin _column-policy-column-padding($column, $columns, $fluid-padding: 0px) {
    $gutter: $column-policy-flag-column-padding;

    //
    // If there is no calc support then the fluid padding is needed.
    // If calc is being supported then there is no need for
    // $fluid-padding.
    //
    @if ($column-policy-flag-calc-support) {
        $fluid-padding: 0px;
    }

    @if ($gutter == 0) {
        padding-left: 0;
        padding-right: $fluid-padding;
    } @else {
        $interval: _column-policy-padding-interval($columns);
        padding-left: abs(($column * $interval) - ($column * $gutter));
        padding-right: (($column + 1) * $interval) - ($column * $gutter) + $fluid-padding;
    }
}

//
// Generates the width for the column with any modifications needed to the width.
// For fluid column blocks the width of the block needs to be offset by a percentage
// of the total fixed width in the row. This allows all the columns to align on the
// same row.
//
// @param number $width: (required) The original width of the column.
// @param number $offset: (optional) The amount of pixels to decrease the width of the column.
//
@mixin _column-policy-column-width($width, $offset: 0) {
    @if ($column-policy-flag-calc-support) {
        @if ($offset == 0) {
            width: $width;
        } @else {
            width: calc(#{$width} - #{$offset});
        }
    } @else {
        @if ($offset == 0) {
            margin-right: $offset;
        } @else {
            margin-right: -$offset;
        }

        //
        // This is used to push the fluid content into the right spot.
        // If padding is present then the padding is added to the column
        // padding as well and this value gets overwritten.
        //
        padding-right: $offset; 
        width: $width;
    }
}

//
// Generates the list of css selectors as a string to be applied to the
// column styles. Each selector generated is separated by a comma.
//
// @access private
// @param number $total: (required) The total number of columns that the
// selectors should use as a context.
// @param number $current: (required) The current column that the
// selectors should use as its context.
// @returns: A string with all the selectors generated.
//
@function _column-policy-column-selectors($total, $current) {
    $classname: $column-policy-internal-class-name;
    $data-attribute: $column-policy-internal-attribute-name;
    $column-selectors: "";
    $selector-separator: "";
    $item-count: 0;
    $offset: $column-policy-flag-nth-child-offset;
    $set: $column-policy-flag-nth-of-type-set;

    @if ($column-policy-flag-data-attribute-support) {
        $column-selectors: $column-selectors + $selector-separator + '[data-' + $data-attribute + '~="' + $total + "-" + $current + '"]';
        $selector-separator: ",";
    }

    @if ($column-policy-flag-nth-of-type-support) {
        @if ($set > 0) {
            @if ($current == 1) {
                $column-selectors: $column-selectors + $selector-separator + "> ." + $classname + ":first-child:nth-last-of-type(" + $set + ")";
                $selector-separator: ",";
            }

            $column-selectors: $column-selectors + $selector-separator + "> ." + $classname + ":first-child:nth-last-of-type(" + $set + ") ~ ." + $classname + ":nth-of-type(" + $total + "n+" + ($current + $offset) + ")";
        } @else {
            $column-selectors: $column-selectors + $selector-separator + "> ." + $classname + ":nth-of-type(" + $total + "n+" + ($current + $offset) + ")";
        }
        $selector-separator: ",";
    }

    @if ($column-policy-flag-nth-child-hack-support) {
        @while ($item-count < $column-policy-flag-nth-child-hack-depth) {
            $column-selectors: $column-selectors + $selector-separator + _column-policy-nth-child-hack($item-count + $current + $offset, "." + $classname);
            $selector-separator: ",";
            $item-count: $item-count + $total;
        }
    }

    @return $column-selectors;
}

//
// Emulates nth-child with css styles.
//
// @access private
// @param number $number: (required) The child count of which item to
// select. Any number lower then 1 will return a first-child selector.
// @param string $element: (required) The element selector to use. This
// could be a class name or element tag but needs to be kept simple.
// @returns: The selector as a string.
//
@function _column-policy-nth-child-hack($number, $element) {
    $selector: $element + ":first-child";
    $minimum: 2;

    @for $i from $minimum through $number {
        $selector: $selector + " + " + $element;
    }

    @return $selector;
}

//
// Calculates the total padding that each column needs to have when
// adding the left and right padding. Since there is one less gutter
// padding then the number of columns then each column will have
// slightly less padding in order to properly create the columns
//
// For example, for four columns with 20px gutters in between each the
// total amount of padding is 60px (3 * 20px) since the columns share
// gutter spacing. Then dividing this by the total columns (four in our
// case) will yield how much padding each column needs. Four this
// example the padding internval would be 15px for each column.
//
// @access private
// @param number $colums: (required) The total number of colums per row.
// @returns: The total padding (left and right) that each columns needs.
//
@function _column-policy-padding-interval($columns) {
    @return ($column-policy-flag-column-padding * ($columns - 1)) / $columns;
}
