//
// These are private helper functions and mixins used by column-policy.
// These functions and mixins are not intended to be used outside of
// column-policy.scss.
//

$column-policy-default-flag-nth-of-type-support: true;
$column-policy-default-flag-data-attribute-support: false;
$column-policy-default-flag-nth-child-hack-support: false;
$column-policy-default-flag-nth-child-hack-depth: 20;
$column-policy-default-flag-use-once: false;
$column-policy-default-flag-column-padding: 0;

$column-policy-flag-nth-of-type-support: null;
$column-policy-flag-data-attribute-support: null;
$column-policy-flag-nth-child-hack-support: null;
$column-policy-flag-nth-child-hack-depth: null;
$column-policy-flag-use-once: null;
$column-policy-flag-column-padding: null;

$column-policy-internal-first-use: true !default;

@mixin _column-policy-set-factory-settings(
    $use-nth-of-type:          $column-policy-default-flag-nth-of-type-support,
    $use-data-attribute:       $column-policy-default-flag-data-attribute-support,
    $use-nth-child-hack:       $column-policy-default-flag-nth-child-hack-support,
    $set-nth-child-hack-depth: $column-policy-default-flag-nth-child-hack-depth,
    $column-padding:           $column-policy-default-flag-column-padding,
    $use-once:                 $column-policy-default-flag-use-once
) {
    $column-policy-default-flag-nth-of-type-support:    $use-nth-of-type;
    $column-policy-default-flag-data-attribute-support: $use-data-attribute;
    $column-policy-default-flag-nth-child-hack-support: $use-nth-child-hack;
    $column-policy-default-flag-nth-child-hack-depth:   $set-nth-child-hack-depth;
    $column-policy-default-flag-use-once:               $use-once;
    $column-policy-default-flag-column-padding:         $column-padding;
}

//
// Defines styles common for all columns. This should only be generated
// the first time column-policy is used.
//
// @access private
//
@mixin _column-policy-common-styles {
    @if ($column-policy-internal-first-use) {
        .column,
        [data-column] {
            float: left;
            position: relative;
            box-sizing: border-box;
        }
    }

    $column-policy-internal-first-use: false;
}

//
// Writes out the styles needed for a specific column given the approach
// to use from the global flags.
//
// @access private
// @param number $total: (required) The total number of columns.
// @param number $current: (requried) The current column that the styles
// are to be applied.
//
@mixin _column-policy-column($total, $current) {
    $column-selectors: _column-policy-column-selectors($total, $current);

    #{$column-selectors} {
        @content;
    }
}

//
// Generates the list of css selectors as a string to be applied to the
// column styles. Each selector generated is separated by a comma.
//
// @access private
// @param number $total: (required) The total number of columns that the
// selectors should use as a context.
// @param number $current: (required) The current column that the
// selectors should use as its context.
// @returns: A string with all the selectors generated.
//
@function _column-policy-column-selectors($total, $current) {
    $column-selectors: "";
    $selector-separator: "";
    $item-count: 0;

    @if ($column-policy-flag-data-attribute-support) {
        $column-selectors: $column-selectors + $selector-separator + '[data-column~="' + $total + "-" + $current + '"]';
        $selector-separator: ",";
    }

    @if ($column-policy-flag-nth-of-type-support) {
        $column-selectors: $column-selectors + $selector-separator + "> .column:nth-of-type(" + $total + "n+" + $current + ")";
        $selector-separator: ",";
    }

    @if ($column-policy-flag-nth-child-hack-support) {
        @while ($item-count < $column-policy-flag-nth-child-hack-depth) {
            $column-selectors: $column-selectors + $selector-separator + _column-policy-nth-child-hack($item-count + $current, ".column");
            $nth-child-separator: ",";
            $item-count: $item-count + $total;
        }
        $selector-separator: ",";
    }

    @return $column-selectors;
}

//
// Emulates nth-child with css styles.
//
// @access private
// @param number $number: (required) The child count of which item to
// select. Any number lower then 1 will return a first-child selector.
// @param string $element: (required) The element selector to use. This
// could be a class name or element tag but needs to be kept simple.
// @returns: The selector as a string.
//
@function _column-policy-nth-child-hack($number, $element) {
    $selector: $element + ":first-child";
    $minimum: 2;

    @for $i from $minimum through $number {
        $selector: $selector + " + " + $element;
    }

    @return $selector;
}

//
// Returns padding for the left and right side of a column. The padding
// returned is intended to be evenly distributed between all the
// columns.
//
// @access private
// @param number $column: (required) The current column being inspected.
// @param number $columns: (required) The total number of columns.
// @returns: A list of two numbers with units. The first is for left and
// the second is for right.
//
@function _column-policy-get-padding($column, $columns) {
    $left: 0;
    $right: 0;
    $endcap-large: (($columns - 1) * $column-policy-flag-column-padding) / $columns;
    $endcap-small: $column-policy-flag-column-padding - $endcap-large;
    $internal: $column-policy-flag-column-padding / 2;

    @if ($columns > 1 and $column-policy-flag-column-padding != 0) {
        //
        // There are 5 different cases that need to be handled.
        // Are we the first column, second column, last column, second
        // to last column or only have two columns in the layout.
        // These five special cases have different left and right
        // padding values. All other padding just split the column
        // padding in half and use that for the padding.
        //
        @if ($column == 1) {
            $right: $endcap-large;
        }

        @if ($column == 2) {
            $left: $endcap-small;
            $right: $internal;
        }

        @if ($column == $columns) {
            $left: $endcap-large;
        }

        @if ($column == $columns - 1) {
            $left: $internal;
            $right: $endcap-small;
        }

        @if ($column > 2 and $column < $columns - 1) {
            $left: $internal;
            $right: $internal;
        }

        @if ($columns == 2) {
            @if ($column == 1) {
                $left: 0;
                $right: $internal;
            }

            @if ($column == 2) {
                $left: $internal;
                $right: 0;
            }
        }
    }

    @return ($left $right);
}
